<!doctype html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport'
          content='width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0'>
    <meta http-equiv='X-UA-Compatible' content='ie=edge'>
    <title>Document</title>
    <script src='/javascripts/socket.io.min.js'></script>
</head>
<body>
<h1><b id='user'></b>聊天室</h1>
<input type='text' id='text'><button id='send'>send</button>
<select  id='select'></select>
<script>
    let select = document.querySelector('#select')
    let text = document.querySelector('#text')
    let send = document.querySelector('#send')
    let user = document.querySelector('#user')
    user.innerHTML = localStorage.getItem('username') + '的 '

    const WebSocketType = {
        Error: 0, //错误
        GroupList: 1, //群列表
        GroupChat: 2, //群聊
        SingleChat: 3, //私聊
    };
    // 引入socket.io js版本
    const socket = io(`ws://localhost:3000?token=${localStorage.getItem("token")}`); // 默认 连接地址为 localhost
    socket.on("connect",()=>{
        socket.emit(WebSocketType.GroupList)
    })
    socket.on(WebSocketType.GroupChat,(msgObj)=>{
        let title = msgObj.user?msgObj.user.username:"广播"
        console.log(title+ ": "+ msgObj.data)
    })
    socket.on(WebSocketType.GroupList, (messageObj) => {
        select.innerHTML = ""
        select.innerHTML = `<option value="all">all</option>` + messageObj.data.map(item => `
    <option value="${item.username}">${item.username}</option>`).join("")
    })
    socket.on(WebSocketType.SingleChat, (msg) => {
        console.log(msg)
    })
    socket.on(WebSocketType.Error, (msgObj)=>{
        localStorage.removeItem("token")
        location.href="/login"
    })
    function createMessage(data,to) {
        return {


            data,
            to
        }
    }

    send.onclick = () => {
        if (select.value === "all") {
            socket.emit(WebSocketType.GroupChat,{
                data: text.value
            })
        } else {
            socket.emit(WebSocketType.SingleChat,{
                data: text.value,
                to:select.value
            })
        }
    }
</script>
</body>
</html>
