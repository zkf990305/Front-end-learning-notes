{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    "incremental": true /* TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度 */,
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    "tsBuildInfoFile": "./buildFile" /* 增量编译文件的存储位置 */,
    "diagnostics": true, // 打印诊断信息
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* 目标语言的版本 */,
    // "lib": [],                                        /* TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array" */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs" /* 生成代码的模板标准 */,
    "rootDir": "./" /* 指定输出文件目录(用于输出)，用于控制输出目录结构 */,
    // "moduleResolution": "node",                       /* 模块解析策略，ts默认用node的解析策略，即相对的方式导入 */
    // "baseUrl": "./",                                  /* 解析非相对模块的基地址，默认是当前目录 */
    // "paths": {},                                      /* 路径映射，相对于baseUrl */
    "rootDirs": [
      "src",
      "out"
    ] /* 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错*/,
    "listEmittedFiles": true, // 打印输出文件
    "listFiles": true, // 打印编译的文件(包括引用的声明文件)
    "typeRoots": [] /* 声明文件目录，默认时node_modules/@types */,
    "types": [] /* 加载的声明文件包 */,
    // "allowUmdGlobalAccess": true,                     /* 允许在模块中全局变量的方式访问umd模块 */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许编译器编译JS，JSX文件 */
    // "checkJs": true,                                  /* 允许在JS文件中报错，通常与allowJS一起使用 */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    "declaration": true /* 生成声明文件，开启后会自动生成声明文件 */,
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": false /* 只生成声明文件，而不会生成js文件 */,
    "sourceMap": true /* 生成目标文件的sourceMap文件 */,
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist" /* 指定输出目录 */,
    "removeComments": true /* 删除注释 */,
    "noEmit": false /* 不输出文件,即编译后不会生成任何js文件 */,
    // "importHelpers": true,                            /* 通过tslib引入helper函数，文件必须是模块 */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现 */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用 */
    // "noEmitOnError": true,                            /* 发送错误时不输出任何文件 */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    "declarationDir": "./file" /* 指定生成声明文件存放目录 */,
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* 允许export=导出，由import from 导入 */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* 开启所有严格的类型检查 */,
    // "noImplicitAny": true,                            /* 不允许隐式的any类型 */
    // "strictNullChecks": true,                         /* 不允许把null、undefined赋值给其他类型的变量 */
    // "strictFunctionTypes": true,                      /* 不允许函数参数双向协变 */
    // "strictBindCallApply": true,                      /* 严格的bind/call/apply检查 */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* 不允许this有隐式的any类型 */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 在代码中注入'use strict' */
    // "noUnusedLocals": true,                           /* 检查只声明、未使用的局部变量(只提示不报错) */
    // "noUnusedParameters": true,                       /* 检查未使用的函数参数(只提示不报错) */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 每个分支都会有返回值 */
    // "noFallthroughCasesInSwitch": true,               /* 防止switch语句贯穿(即如果没有break语句后面不会执行) */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
  "include": ["src/**/*"],
  // 指定一个排除列表（include的反向操作）
  "exclude": ["demo.ts"],
  // 指定哪些文件使用该配置（属于手动一个个指定文件）
  "files": ["demo.ts"]
}
